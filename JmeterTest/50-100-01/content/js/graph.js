/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
    $(".portlet-header").css("cursor", "auto");
});

var showControllersOnly = false;
var seriesFilter = "";
var filtersOnlySampleSeries = true;

// Fixes time stamps
function fixTimeStamps(series, offset){
    $.each(series, function(index, item) {
        $.each(item.data, function(index, coord) {
            coord[0] += offset;
        });
    });
}

// Check if the specified jquery object is a graph
function isGraph(object){
    return object.data('plot') !== undefined;
}

/**
 * Export graph to a PNG
 */
function exportToPNG(graphName, target) {
    var plot = $("#"+graphName).data('plot');
    var flotCanvas = plot.getCanvas();
    var image = flotCanvas.toDataURL();
    image = image.replace("image/png", "image/octet-stream");
    
    var downloadAttrSupported = ("download" in document.createElement("a"));
    if(downloadAttrSupported === true) {
        target.download = graphName + ".png";
        target.href = image;
    }
    else {
        document.location.href = image;
    }
    
}

// Override the specified graph options to fit the requirements of an overview
function prepareOverviewOptions(graphOptions){
    var overviewOptions = {
        series: {
            shadowSize: 0,
            lines: {
                lineWidth: 1
            },
            points: {
                // Show points on overview only when linked graph does not show
                // lines
                show: getProperty('series.lines.show', graphOptions) == false,
                radius : 1
            }
        },
        xaxis: {
            ticks: 2,
            axisLabel: null
        },
        yaxis: {
            ticks: 2,
            axisLabel: null
        },
        legend: {
            show: false,
            container: null
        },
        grid: {
            hoverable: false
        },
        tooltip: false
    };
    return $.extend(true, {}, graphOptions, overviewOptions);
}

// Force axes boundaries using graph extra options
function prepareOptions(options, data) {
    options.canvas = true;
    var extraOptions = data.extraOptions;
    if(extraOptions !== undefined){
        var xOffset = options.xaxis.mode === "time" ? 28800000 : 0;
        var yOffset = options.yaxis.mode === "time" ? 28800000 : 0;

        if(!isNaN(extraOptions.minX))
        	options.xaxis.min = parseFloat(extraOptions.minX) + xOffset;
        
        if(!isNaN(extraOptions.maxX))
        	options.xaxis.max = parseFloat(extraOptions.maxX) + xOffset;
        
        if(!isNaN(extraOptions.minY))
        	options.yaxis.min = parseFloat(extraOptions.minY) + yOffset;
        
        if(!isNaN(extraOptions.maxY))
        	options.yaxis.max = parseFloat(extraOptions.maxY) + yOffset;
    }
}

// Filter, mark series and sort data
/**
 * @param data
 * @param noMatchColor if defined and true, series.color are not matched with index
 */
function prepareSeries(data, noMatchColor){
    var result = data.result;

    // Keep only series when needed
    if(seriesFilter && (!filtersOnlySampleSeries || result.supportsControllersDiscrimination)){
        // Insensitive case matching
        var regexp = new RegExp(seriesFilter, 'i');
        result.series = $.grep(result.series, function(series, index){
            return regexp.test(series.label);
        });
    }

    // Keep only controllers series when supported and needed
    if(result.supportsControllersDiscrimination && showControllersOnly){
        result.series = $.grep(result.series, function(series, index){
            return series.isController;
        });
    }

    // Sort data and mark series
    $.each(result.series, function(index, series) {
        series.data.sort(compareByXCoordinate);
        if(!(noMatchColor && noMatchColor===true)) {
	        series.color = index;
	    }
    });
}

// Set the zoom on the specified plot object
function zoomPlot(plot, xmin, xmax, ymin, ymax){
    var axes = plot.getAxes();
    // Override axes min and max options
    $.extend(true, axes, {
        xaxis: {
            options : { min: xmin, max: xmax }
        },
        yaxis: {
            options : { min: ymin, max: ymax }
        }
    });

    // Redraw the plot
    plot.setupGrid();
    plot.draw();
}

// Prepares DOM items to add zoom function on the specified graph
function setGraphZoomable(graphSelector, overviewSelector){
    var graph = $(graphSelector);
    var overview = $(overviewSelector);

    // Ignore mouse down event
    graph.bind("mousedown", function() { return false; });
    overview.bind("mousedown", function() { return false; });

    // Zoom on selection
    graph.bind("plotselected", function (event, ranges) {
        // clamp the zooming to prevent infinite zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 0.00001) {
            ranges.xaxis.to = ranges.xaxis.from + 0.00001;
        }
        if (ranges.yaxis.to - ranges.yaxis.from < 0.00001) {
            ranges.yaxis.to = ranges.yaxis.from + 0.00001;
        }

        // Do the zooming
        var plot = graph.data('plot');
        zoomPlot(plot, ranges.xaxis.from, ranges.xaxis.to, ranges.yaxis.from, ranges.yaxis.to);
        plot.clearSelection();

        // Synchronize overview selection
        overview.data('plot').setSelection(ranges, true);
    });

    // Zoom linked graph on overview selection
    overview.bind("plotselected", function (event, ranges) {
        graph.data('plot').setSelection(ranges);
    });

    // Reset linked graph zoom when reseting overview selection
    overview.bind("plotunselected", function () {
        var overviewAxes = overview.data('plot').getAxes();
        zoomPlot(graph.data('plot'), overviewAxes.xaxis.min, overviewAxes.xaxis.max, overviewAxes.yaxis.min, overviewAxes.yaxis.max);
    });
}

var responseTimePercentilesInfos = {
        data: {"result": {"minY": 30.0, "minX": 0.0, "maxY": 8219.0, "series": [{"data": [[0.0, 95.0], [0.1, 129.0], [0.2, 137.0], [0.3, 138.0], [0.4, 141.0], [0.5, 142.0], [0.6, 144.0], [0.7, 146.0], [0.8, 148.0], [0.9, 149.0], [1.0, 152.0], [1.1, 154.0], [1.2, 155.0], [1.3, 157.0], [1.4, 158.0], [1.5, 161.0], [1.6, 162.0], [1.7, 163.0], [1.8, 165.0], [1.9, 166.0], [2.0, 168.0], [2.1, 169.0], [2.2, 170.0], [2.3, 173.0], [2.4, 175.0], [2.5, 176.0], [2.6, 177.0], [2.7, 179.0], [2.8, 181.0], [2.9, 181.0], [3.0, 182.0], [3.1, 184.0], [3.2, 184.0], [3.3, 185.0], [3.4, 186.0], [3.5, 187.0], [3.6, 188.0], [3.7, 189.0], [3.8, 190.0], [3.9, 192.0], [4.0, 193.0], [4.1, 195.0], [4.2, 196.0], [4.3, 197.0], [4.4, 198.0], [4.5, 198.0], [4.6, 200.0], [4.7, 201.0], [4.8, 202.0], [4.9, 203.0], [5.0, 205.0], [5.1, 206.0], [5.2, 207.0], [5.3, 208.0], [5.4, 209.0], [5.5, 210.0], [5.6, 211.0], [5.7, 211.0], [5.8, 212.0], [5.9, 213.0], [6.0, 214.0], [6.1, 217.0], [6.2, 218.0], [6.3, 220.0], [6.4, 221.0], [6.5, 223.0], [6.6, 225.0], [6.7, 226.0], [6.8, 227.0], [6.9, 229.0], [7.0, 232.0], [7.1, 233.0], [7.2, 234.0], [7.3, 236.0], [7.4, 238.0], [7.5, 240.0], [7.6, 240.0], [7.7, 243.0], [7.8, 246.0], [7.9, 249.0], [8.0, 251.0], [8.1, 254.0], [8.2, 256.0], [8.3, 259.0], [8.4, 260.0], [8.5, 262.0], [8.6, 265.0], [8.7, 268.0], [8.8, 269.0], [8.9, 272.0], [9.0, 278.0], [9.1, 283.0], [9.2, 287.0], [9.3, 293.0], [9.4, 297.0], [9.5, 300.0], [9.6, 303.0], [9.7, 309.0], [9.8, 313.0], [9.9, 317.0], [10.0, 326.0], [10.1, 331.0], [10.2, 337.0], [10.3, 339.0], [10.4, 343.0], [10.5, 352.0], [10.6, 359.0], [10.7, 368.0], [10.8, 373.0], [10.9, 380.0], [11.0, 385.0], [11.1, 394.0], [11.2, 400.0], [11.3, 403.0], [11.4, 409.0], [11.5, 411.0], [11.6, 413.0], [11.7, 420.0], [11.8, 422.0], [11.9, 426.0], [12.0, 429.0], [12.1, 432.0], [12.2, 435.0], [12.3, 438.0], [12.4, 441.0], [12.5, 443.0], [12.6, 445.0], [12.7, 449.0], [12.8, 452.0], [12.9, 453.0], [13.0, 457.0], [13.1, 458.0], [13.2, 462.0], [13.3, 468.0], [13.4, 469.0], [13.5, 470.0], [13.6, 471.0], [13.7, 473.0], [13.8, 476.0], [13.9, 478.0], [14.0, 482.0], [14.1, 487.0], [14.2, 489.0], [14.3, 494.0], [14.4, 496.0], [14.5, 499.0], [14.6, 502.0], [14.7, 507.0], [14.8, 510.0], [14.9, 513.0], [15.0, 516.0], [15.1, 519.0], [15.2, 521.0], [15.3, 523.0], [15.4, 527.0], [15.5, 531.0], [15.6, 534.0], [15.7, 538.0], [15.8, 543.0], [15.9, 545.0], [16.0, 549.0], [16.1, 553.0], [16.2, 556.0], [16.3, 560.0], [16.4, 565.0], [16.5, 574.0], [16.6, 576.0], [16.7, 579.0], [16.8, 582.0], [16.9, 586.0], [17.0, 589.0], [17.1, 599.0], [17.2, 605.0], [17.3, 612.0], [17.4, 620.0], [17.5, 627.0], [17.6, 630.0], [17.7, 638.0], [17.8, 640.0], [17.9, 646.0], [18.0, 649.0], [18.1, 654.0], [18.2, 657.0], [18.3, 664.0], [18.4, 672.0], [18.5, 681.0], [18.6, 688.0], [18.7, 690.0], [18.8, 693.0], [18.9, 697.0], [19.0, 701.0], [19.1, 703.0], [19.2, 706.0], [19.3, 708.0], [19.4, 712.0], [19.5, 716.0], [19.6, 719.0], [19.7, 722.0], [19.8, 725.0], [19.9, 729.0], [20.0, 731.0], [20.1, 734.0], [20.2, 735.0], [20.3, 737.0], [20.4, 738.0], [20.5, 740.0], [20.6, 742.0], [20.7, 744.0], [20.8, 749.0], [20.9, 753.0], [21.0, 756.0], [21.1, 759.0], [21.2, 762.0], [21.3, 765.0], [21.4, 767.0], [21.5, 768.0], [21.6, 771.0], [21.7, 777.0], [21.8, 782.0], [21.9, 784.0], [22.0, 786.0], [22.1, 790.0], [22.2, 794.0], [22.3, 795.0], [22.4, 797.0], [22.5, 798.0], [22.6, 801.0], [22.7, 804.0], [22.8, 807.0], [22.9, 810.0], [23.0, 814.0], [23.1, 816.0], [23.2, 821.0], [23.3, 824.0], [23.4, 825.0], [23.5, 826.0], [23.6, 828.0], [23.7, 831.0], [23.8, 831.0], [23.9, 833.0], [24.0, 835.0], [24.1, 837.0], [24.2, 841.0], [24.3, 846.0], [24.4, 849.0], [24.5, 851.0], [24.6, 855.0], [24.7, 860.0], [24.8, 862.0], [24.9, 865.0], [25.0, 869.0], [25.1, 874.0], [25.2, 878.0], [25.3, 882.0], [25.4, 885.0], [25.5, 888.0], [25.6, 891.0], [25.7, 893.0], [25.8, 897.0], [25.9, 900.0], [26.0, 902.0], [26.1, 904.0], [26.2, 907.0], [26.3, 910.0], [26.4, 912.0], [26.5, 915.0], [26.6, 919.0], [26.7, 924.0], [26.8, 927.0], [26.9, 929.0], [27.0, 932.0], [27.1, 934.0], [27.2, 940.0], [27.3, 942.0], [27.4, 945.0], [27.5, 948.0], [27.6, 949.0], [27.7, 954.0], [27.8, 959.0], [27.9, 962.0], [28.0, 967.0], [28.1, 968.0], [28.2, 969.0], [28.3, 973.0], [28.4, 975.0], [28.5, 979.0], [28.6, 983.0], [28.7, 985.0], [28.8, 987.0], [28.9, 989.0], [29.0, 992.0], [29.1, 995.0], [29.2, 998.0], [29.3, 1001.0], [29.4, 1005.0], [29.5, 1007.0], [29.6, 1008.0], [29.7, 1010.0], [29.8, 1012.0], [29.9, 1014.0], [30.0, 1017.0], [30.1, 1019.0], [30.2, 1021.0], [30.3, 1023.0], [30.4, 1024.0], [30.5, 1026.0], [30.6, 1030.0], [30.7, 1033.0], [30.8, 1038.0], [30.9, 1040.0], [31.0, 1042.0], [31.1, 1045.0], [31.2, 1047.0], [31.3, 1049.0], [31.4, 1054.0], [31.5, 1055.0], [31.6, 1058.0], [31.7, 1061.0], [31.8, 1063.0], [31.9, 1066.0], [32.0, 1070.0], [32.1, 1071.0], [32.2, 1073.0], [32.3, 1075.0], [32.4, 1077.0], [32.5, 1079.0], [32.6, 1080.0], [32.7, 1082.0], [32.8, 1085.0], [32.9, 1088.0], [33.0, 1092.0], [33.1, 1094.0], [33.2, 1097.0], [33.3, 1100.0], [33.4, 1103.0], [33.5, 1106.0], [33.6, 1109.0], [33.7, 1112.0], [33.8, 1114.0], [33.9, 1115.0], [34.0, 1117.0], [34.1, 1118.0], [34.2, 1123.0], [34.3, 1125.0], [34.4, 1128.0], [34.5, 1131.0], [34.6, 1133.0], [34.7, 1136.0], [34.8, 1138.0], [34.9, 1141.0], [35.0, 1143.0], [35.1, 1145.0], [35.2, 1148.0], [35.3, 1152.0], [35.4, 1155.0], [35.5, 1157.0], [35.6, 1160.0], [35.7, 1161.0], [35.8, 1162.0], [35.9, 1164.0], [36.0, 1168.0], [36.1, 1169.0], [36.2, 1170.0], [36.3, 1174.0], [36.4, 1177.0], [36.5, 1178.0], [36.6, 1182.0], [36.7, 1183.0], [36.8, 1186.0], [36.9, 1188.0], [37.0, 1191.0], [37.1, 1194.0], [37.2, 1196.0], [37.3, 1197.0], [37.4, 1200.0], [37.5, 1200.0], [37.6, 1204.0], [37.7, 1207.0], [37.8, 1211.0], [37.9, 1216.0], [38.0, 1218.0], [38.1, 1220.0], [38.2, 1224.0], [38.3, 1225.0], [38.4, 1228.0], [38.5, 1231.0], [38.6, 1232.0], [38.7, 1232.0], [38.8, 1234.0], [38.9, 1236.0], [39.0, 1239.0], [39.1, 1242.0], [39.2, 1245.0], [39.3, 1248.0], [39.4, 1251.0], [39.5, 1254.0], [39.6, 1258.0], [39.7, 1258.0], [39.8, 1262.0], [39.9, 1263.0], [40.0, 1265.0], [40.1, 1266.0], [40.2, 1268.0], [40.3, 1269.0], [40.4, 1270.0], [40.5, 1272.0], [40.6, 1274.0], [40.7, 1275.0], [40.8, 1278.0], [40.9, 1279.0], [41.0, 1281.0], [41.1, 1282.0], [41.2, 1284.0], [41.3, 1285.0], [41.4, 1288.0], [41.5, 1289.0], [41.6, 1289.0], [41.7, 1291.0], [41.8, 1294.0], [41.9, 1298.0], [42.0, 1300.0], [42.1, 1301.0], [42.2, 1302.0], [42.3, 1304.0], [42.4, 1308.0], [42.5, 1310.0], [42.6, 1311.0], [42.7, 1314.0], [42.8, 1315.0], [42.9, 1315.0], [43.0, 1318.0], [43.1, 1320.0], [43.2, 1322.0], [43.3, 1325.0], [43.4, 1326.0], [43.5, 1328.0], [43.6, 1331.0], [43.7, 1332.0], [43.8, 1334.0], [43.9, 1336.0], [44.0, 1339.0], [44.1, 1341.0], [44.2, 1343.0], [44.3, 1344.0], [44.4, 1346.0], [44.5, 1348.0], [44.6, 1350.0], [44.7, 1351.0], [44.8, 1353.0], [44.9, 1354.0], [45.0, 1357.0], [45.1, 1359.0], [45.2, 1360.0], [45.3, 1363.0], [45.4, 1366.0], [45.5, 1369.0], [45.6, 1370.0], [45.7, 1372.0], [45.8, 1375.0], [45.9, 1377.0], [46.0, 1377.0], [46.1, 1378.0], [46.2, 1380.0], [46.3, 1382.0], [46.4, 1384.0], [46.5, 1385.0], [46.6, 1387.0], [46.7, 1388.0], [46.8, 1390.0], [46.9, 1391.0], [47.0, 1393.0], [47.1, 1397.0], [47.2, 1399.0], [47.3, 1400.0], [47.4, 1404.0], [47.5, 1405.0], [47.6, 1408.0], [47.7, 1409.0], [47.8, 1411.0], [47.9, 1413.0], [48.0, 1415.0], [48.1, 1418.0], [48.2, 1419.0], [48.3, 1421.0], [48.4, 1422.0], [48.5, 1424.0], [48.6, 1426.0], [48.7, 1428.0], [48.8, 1430.0], [48.9, 1431.0], [49.0, 1434.0], [49.1, 1437.0], [49.2, 1438.0], [49.3, 1440.0], [49.4, 1441.0], [49.5, 1444.0], [49.6, 1446.0], [49.7, 1448.0], [49.8, 1449.0], [49.9, 1451.0], [50.0, 1453.0], [50.1, 1455.0], [50.2, 1457.0], [50.3, 1458.0], [50.4, 1460.0], [50.5, 1462.0], [50.6, 1463.0], [50.7, 1464.0], [50.8, 1466.0], [50.9, 1467.0], [51.0, 1469.0], [51.1, 1470.0], [51.2, 1473.0], [51.3, 1474.0], [51.4, 1475.0], [51.5, 1476.0], [51.6, 1479.0], [51.7, 1480.0], [51.8, 1481.0], [51.9, 1483.0], [52.0, 1485.0], [52.1, 1486.0], [52.2, 1488.0], [52.3, 1488.0], [52.4, 1493.0], [52.5, 1494.0], [52.6, 1496.0], [52.7, 1497.0], [52.8, 1499.0], [52.9, 1499.0], [53.0, 1501.0], [53.1, 1502.0], [53.2, 1504.0], [53.3, 1505.0], [53.4, 1507.0], [53.5, 1511.0], [53.6, 1512.0], [53.7, 1514.0], [53.8, 1515.0], [53.9, 1517.0], [54.0, 1518.0], [54.1, 1521.0], [54.2, 1522.0], [54.3, 1525.0], [54.4, 1526.0], [54.5, 1527.0], [54.6, 1531.0], [54.7, 1532.0], [54.8, 1532.0], [54.9, 1533.0], [55.0, 1535.0], [55.1, 1536.0], [55.2, 1538.0], [55.3, 1539.0], [55.4, 1541.0], [55.5, 1542.0], [55.6, 1544.0], [55.7, 1546.0], [55.8, 1546.0], [55.9, 1547.0], [56.0, 1549.0], [56.1, 1551.0], [56.2, 1552.0], [56.3, 1554.0], [56.4, 1557.0], [56.5, 1561.0], [56.6, 1563.0], [56.7, 1564.0], [56.8, 1566.0], [56.9, 1569.0], [57.0, 1570.0], [57.1, 1573.0], [57.2, 1574.0], [57.3, 1575.0], [57.4, 1577.0], [57.5, 1579.0], [57.6, 1580.0], [57.7, 1582.0], [57.8, 1584.0], [57.9, 1587.0], [58.0, 1588.0], [58.1, 1590.0], [58.2, 1591.0], [58.3, 1593.0], [58.4, 1595.0], [58.5, 1598.0], [58.6, 1601.0], [58.7, 1604.0], [58.8, 1606.0], [58.9, 1608.0], [59.0, 1608.0], [59.1, 1610.0], [59.2, 1614.0], [59.3, 1616.0], [59.4, 1618.0], [59.5, 1621.0], [59.6, 1622.0], [59.7, 1623.0], [59.8, 1625.0], [59.9, 1627.0], [60.0, 1628.0], [60.1, 1630.0], [60.2, 1632.0], [60.3, 1633.0], [60.4, 1635.0], [60.5, 1635.0], [60.6, 1640.0], [60.7, 1643.0], [60.8, 1644.0], [60.9, 1647.0], [61.0, 1649.0], [61.1, 1651.0], [61.2, 1654.0], [61.3, 1655.0], [61.4, 1657.0], [61.5, 1658.0], [61.6, 1659.0], [61.7, 1661.0], [61.8, 1662.0], [61.9, 1666.0], [62.0, 1668.0], [62.1, 1671.0], [62.2, 1672.0], [62.3, 1674.0], [62.4, 1676.0], [62.5, 1678.0], [62.6, 1679.0], [62.7, 1682.0], [62.8, 1683.0], [62.9, 1685.0], [63.0, 1687.0], [63.1, 1688.0], [63.2, 1689.0], [63.3, 1690.0], [63.4, 1691.0], [63.5, 1692.0], [63.6, 1693.0], [63.7, 1695.0], [63.8, 1697.0], [63.9, 1697.0], [64.0, 1698.0], [64.1, 1699.0], [64.2, 1700.0], [64.3, 1703.0], [64.4, 1704.0], [64.5, 1706.0], [64.6, 1708.0], [64.7, 1709.0], [64.8, 1710.0], [64.9, 1712.0], [65.0, 1713.0], [65.1, 1715.0], [65.2, 1717.0], [65.3, 1718.0], [65.4, 1719.0], [65.5, 1721.0], [65.6, 1723.0], [65.7, 1724.0], [65.8, 1726.0], [65.9, 1727.0], [66.0, 1729.0], [66.1, 1732.0], [66.2, 1734.0], [66.3, 1735.0], [66.4, 1737.0], [66.5, 1739.0], [66.6, 1741.0], [66.7, 1742.0], [66.8, 1743.0], [66.9, 1745.0], [67.0, 1747.0], [67.1, 1747.0], [67.2, 1749.0], [67.3, 1750.0], [67.4, 1754.0], [67.5, 1755.0], [67.6, 1756.0], [67.7, 1756.0], [67.8, 1758.0], [67.9, 1759.0], [68.0, 1761.0], [68.1, 1763.0], [68.2, 1764.0], [68.3, 1766.0], [68.4, 1767.0], [68.5, 1771.0], [68.6, 1773.0], [68.7, 1775.0], [68.8, 1778.0], [68.9, 1780.0], [69.0, 1783.0], [69.1, 1784.0], [69.2, 1785.0], [69.3, 1786.0], [69.4, 1786.0], [69.5, 1787.0], [69.6, 1790.0], [69.7, 1794.0], [69.8, 1796.0], [69.9, 1798.0], [70.0, 1799.0], [70.1, 1803.0], [70.2, 1805.0], [70.3, 1807.0], [70.4, 1810.0], [70.5, 1813.0], [70.6, 1815.0], [70.7, 1819.0], [70.8, 1822.0], [70.9, 1824.0], [71.0, 1826.0], [71.1, 1828.0], [71.2, 1832.0], [71.3, 1833.0], [71.4, 1836.0], [71.5, 1841.0], [71.6, 1842.0], [71.7, 1845.0], [71.8, 1848.0], [71.9, 1852.0], [72.0, 1854.0], [72.1, 1859.0], [72.2, 1860.0], [72.3, 1861.0], [72.4, 1863.0], [72.5, 1865.0], [72.6, 1866.0], [72.7, 1869.0], [72.8, 1871.0], [72.9, 1872.0], [73.0, 1873.0], [73.1, 1875.0], [73.2, 1876.0], [73.3, 1878.0], [73.4, 1880.0], [73.5, 1884.0], [73.6, 1885.0], [73.7, 1888.0], [73.8, 1890.0], [73.9, 1891.0], [74.0, 1894.0], [74.1, 1897.0], [74.2, 1901.0], [74.3, 1904.0], [74.4, 1906.0], [74.5, 1908.0], [74.6, 1909.0], [74.7, 1912.0], [74.8, 1914.0], [74.9, 1917.0], [75.0, 1920.0], [75.1, 1925.0], [75.2, 1927.0], [75.3, 1931.0], [75.4, 1932.0], [75.5, 1934.0], [75.6, 1935.0], [75.7, 1938.0], [75.8, 1941.0], [75.9, 1942.0], [76.0, 1943.0], [76.1, 1946.0], [76.2, 1947.0], [76.3, 1951.0], [76.4, 1952.0], [76.5, 1954.0], [76.6, 1955.0], [76.7, 1957.0], [76.8, 1961.0], [76.9, 1964.0], [77.0, 1966.0], [77.1, 1969.0], [77.2, 1972.0], [77.3, 1975.0], [77.4, 1979.0], [77.5, 1981.0], [77.6, 1982.0], [77.7, 1983.0], [77.8, 1984.0], [77.9, 1984.0], [78.0, 1987.0], [78.1, 1989.0], [78.2, 1993.0], [78.3, 1997.0], [78.4, 1999.0], [78.5, 2001.0], [78.6, 2003.0], [78.7, 2006.0], [78.8, 2008.0], [78.9, 2009.0], [79.0, 2011.0], [79.1, 2015.0], [79.2, 2016.0], [79.3, 2019.0], [79.4, 2022.0], [79.5, 2024.0], [79.6, 2026.0], [79.7, 2029.0], [79.8, 2031.0], [79.9, 2033.0], [80.0, 2036.0], [80.1, 2038.0], [80.2, 2040.0], [80.3, 2044.0], [80.4, 2045.0], [80.5, 2050.0], [80.6, 2051.0], [80.7, 2053.0], [80.8, 2056.0], [80.9, 2058.0], [81.0, 2062.0], [81.1, 2064.0], [81.2, 2067.0], [81.3, 2069.0], [81.4, 2071.0], [81.5, 2074.0], [81.6, 2077.0], [81.7, 2083.0], [81.8, 2085.0], [81.9, 2087.0], [82.0, 2090.0], [82.1, 2092.0], [82.2, 2093.0], [82.3, 2096.0], [82.4, 2100.0], [82.5, 2103.0], [82.6, 2105.0], [82.7, 2107.0], [82.8, 2110.0], [82.9, 2112.0], [83.0, 2114.0], [83.1, 2115.0], [83.2, 2120.0], [83.3, 2123.0], [83.4, 2126.0], [83.5, 2130.0], [83.6, 2133.0], [83.7, 2136.0], [83.8, 2137.0], [83.9, 2140.0], [84.0, 2143.0], [84.1, 2147.0], [84.2, 2151.0], [84.3, 2153.0], [84.4, 2155.0], [84.5, 2159.0], [84.6, 2162.0], [84.7, 2163.0], [84.8, 2166.0], [84.9, 2169.0], [85.0, 2171.0], [85.1, 2174.0], [85.2, 2178.0], [85.3, 2183.0], [85.4, 2184.0], [85.5, 2185.0], [85.6, 2188.0], [85.7, 2190.0], [85.8, 2195.0], [85.9, 2197.0], [86.0, 2199.0], [86.1, 2200.0], [86.2, 2204.0], [86.3, 2208.0], [86.4, 2210.0], [86.5, 2212.0], [86.6, 2213.0], [86.7, 2215.0], [86.8, 2217.0], [86.9, 2219.0], [87.0, 2222.0], [87.1, 2224.0], [87.2, 2226.0], [87.3, 2228.0], [87.4, 2230.0], [87.5, 2232.0], [87.6, 2233.0], [87.7, 2236.0], [87.8, 2239.0], [87.9, 2243.0], [88.0, 2246.0], [88.1, 2248.0], [88.2, 2250.0], [88.3, 2254.0], [88.4, 2257.0], [88.5, 2261.0], [88.6, 2266.0], [88.7, 2271.0], [88.8, 2274.0], [88.9, 2277.0], [89.0, 2282.0], [89.1, 2287.0], [89.2, 2290.0], [89.3, 2293.0], [89.4, 2297.0], [89.5, 2303.0], [89.6, 2307.0], [89.7, 2310.0], [89.8, 2315.0], [89.9, 2319.0], [90.0, 2322.0], [90.1, 2325.0], [90.2, 2331.0], [90.3, 2337.0], [90.4, 2341.0], [90.5, 2346.0], [90.6, 2348.0], [90.7, 2352.0], [90.8, 2354.0], [90.9, 2357.0], [91.0, 2361.0], [91.1, 2364.0], [91.2, 2365.0], [91.3, 2370.0], [91.4, 2372.0], [91.5, 2375.0], [91.6, 2377.0], [91.7, 2381.0], [91.8, 2383.0], [91.9, 2387.0], [92.0, 2393.0], [92.1, 2397.0], [92.2, 2399.0], [92.3, 2402.0], [92.4, 2403.0], [92.5, 2409.0], [92.6, 2411.0], [92.7, 2416.0], [92.8, 2417.0], [92.9, 2422.0], [93.0, 2423.0], [93.1, 2431.0], [93.2, 2435.0], [93.3, 2437.0], [93.4, 2440.0], [93.5, 2447.0], [93.6, 2451.0], [93.7, 2457.0], [93.8, 2463.0], [93.9, 2467.0], [94.0, 2471.0], [94.1, 2475.0], [94.2, 2482.0], [94.3, 2491.0], [94.4, 2500.0], [94.5, 2507.0], [94.6, 2519.0], [94.7, 2526.0], [94.8, 2530.0], [94.9, 2538.0], [95.0, 2543.0], [95.1, 2554.0], [95.2, 2566.0], [95.3, 2576.0], [95.4, 2587.0], [95.5, 2599.0], [95.6, 2606.0], [95.7, 2618.0], [95.8, 2625.0], [95.9, 2636.0], [96.0, 2642.0], [96.1, 2652.0], [96.2, 2678.0], [96.3, 2688.0], [96.4, 2695.0], [96.5, 2704.0], [96.6, 2720.0], [96.7, 2728.0], [96.8, 2738.0], [96.9, 2751.0], [97.0, 2766.0], [97.1, 2773.0], [97.2, 2796.0], [97.3, 2800.0], [97.4, 2810.0], [97.5, 2816.0], [97.6, 2824.0], [97.7, 2835.0], [97.8, 2843.0], [97.9, 2852.0], [98.0, 2859.0], [98.1, 2879.0], [98.2, 2881.0], [98.3, 2889.0], [98.4, 2896.0], [98.5, 2912.0], [98.6, 2918.0], [98.7, 2940.0], [98.8, 2949.0], [98.9, 2954.0], [99.0, 2959.0], [99.1, 2967.0], [99.2, 2982.0], [99.3, 3001.0], [99.4, 3007.0], [99.5, 3052.0], [99.6, 3102.0], [99.7, 3138.0], [99.8, 3187.0], [99.9, 3361.0], [100.0, 8219.0]], "isOverall": false, "label": "事务控制器", "isController": true}, {"data": [[0.0, 41.0], [0.1, 47.0], [0.2, 49.0], [0.3, 52.0], [0.4, 53.0], [0.5, 54.0], [0.6, 54.0], [0.7, 56.0], [0.8, 57.0], [0.9, 58.0], [1.0, 59.0], [1.1, 59.0], [1.2, 60.0], [1.3, 62.0], [1.4, 62.0], [1.5, 62.0], [1.6, 63.0], [1.7, 63.0], [1.8, 64.0], [1.9, 64.0], [2.0, 65.0], [2.1, 66.0], [2.2, 66.0], [2.3, 67.0], [2.4, 67.0], [2.5, 68.0], [2.6, 69.0], [2.7, 70.0], [2.8, 71.0], [2.9, 71.0], [3.0, 72.0], [3.1, 73.0], [3.2, 74.0], [3.3, 74.0], [3.4, 75.0], [3.5, 76.0], [3.6, 77.0], [3.7, 77.0], [3.8, 78.0], [3.9, 78.0], [4.0, 79.0], [4.1, 79.0], [4.2, 81.0], [4.3, 81.0], [4.4, 82.0], [4.5, 82.0], [4.6, 83.0], [4.7, 83.0], [4.8, 84.0], [4.9, 84.0], [5.0, 85.0], [5.1, 85.0], [5.2, 86.0], [5.3, 86.0], [5.4, 87.0], [5.5, 87.0], [5.6, 88.0], [5.7, 89.0], [5.8, 89.0], [5.9, 90.0], [6.0, 91.0], [6.1, 92.0], [6.2, 92.0], [6.3, 92.0], [6.4, 93.0], [6.5, 93.0], [6.6, 94.0], [6.7, 95.0], [6.8, 96.0], [6.9, 96.0], [7.0, 97.0], [7.1, 98.0], [7.2, 98.0], [7.3, 99.0], [7.4, 99.0], [7.5, 100.0], [7.6, 101.0], [7.7, 101.0], [7.8, 101.0], [7.9, 102.0], [8.0, 102.0], [8.1, 102.0], [8.2, 103.0], [8.3, 103.0], [8.4, 104.0], [8.5, 105.0], [8.6, 105.0], [8.7, 106.0], [8.8, 106.0], [8.9, 107.0], [9.0, 107.0], [9.1, 108.0], [9.2, 108.0], [9.3, 109.0], [9.4, 110.0], [9.5, 111.0], [9.6, 111.0], [9.7, 112.0], [9.8, 112.0], [9.9, 112.0], [10.0, 113.0], [10.1, 114.0], [10.2, 114.0], [10.3, 115.0], [10.4, 115.0], [10.5, 116.0], [10.6, 117.0], [10.7, 117.0], [10.8, 118.0], [10.9, 119.0], [11.0, 120.0], [11.1, 120.0], [11.2, 121.0], [11.3, 122.0], [11.4, 123.0], [11.5, 123.0], [11.6, 124.0], [11.7, 126.0], [11.8, 127.0], [11.9, 128.0], [12.0, 129.0], [12.1, 130.0], [12.2, 130.0], [12.3, 131.0], [12.4, 132.0], [12.5, 133.0], [12.6, 134.0], [12.7, 135.0], [12.8, 137.0], [12.9, 138.0], [13.0, 139.0], [13.1, 140.0], [13.2, 140.0], [13.3, 142.0], [13.4, 143.0], [13.5, 144.0], [13.6, 145.0], [13.7, 147.0], [13.8, 148.0], [13.9, 150.0], [14.0, 153.0], [14.1, 155.0], [14.2, 156.0], [14.3, 158.0], [14.4, 158.0], [14.5, 160.0], [14.6, 163.0], [14.7, 164.0], [14.8, 166.0], [14.9, 172.0], [15.0, 174.0], [15.1, 180.0], [15.2, 183.0], [15.3, 185.0], [15.4, 187.0], [15.5, 189.0], [15.6, 193.0], [15.7, 195.0], [15.8, 200.0], [15.9, 202.0], [16.0, 206.0], [16.1, 207.0], [16.2, 213.0], [16.3, 216.0], [16.4, 218.0], [16.5, 223.0], [16.6, 226.0], [16.7, 229.0], [16.8, 233.0], [16.9, 239.0], [17.0, 244.0], [17.1, 249.0], [17.2, 250.0], [17.3, 257.0], [17.4, 260.0], [17.5, 264.0], [17.6, 269.0], [17.7, 274.0], [17.8, 275.0], [17.9, 277.0], [18.0, 280.0], [18.1, 282.0], [18.2, 284.0], [18.3, 287.0], [18.4, 289.0], [18.5, 294.0], [18.6, 294.0], [18.7, 296.0], [18.8, 297.0], [18.9, 299.0], [19.0, 300.0], [19.1, 302.0], [19.2, 303.0], [19.3, 306.0], [19.4, 307.0], [19.5, 309.0], [19.6, 310.0], [19.7, 313.0], [19.8, 315.0], [19.9, 316.0], [20.0, 317.0], [20.1, 318.0], [20.2, 320.0], [20.3, 321.0], [20.4, 323.0], [20.5, 324.0], [20.6, 325.0], [20.7, 327.0], [20.8, 328.0], [20.9, 329.0], [21.0, 331.0], [21.1, 332.0], [21.2, 333.0], [21.3, 335.0], [21.4, 337.0], [21.5, 339.0], [21.6, 343.0], [21.7, 346.0], [21.8, 348.0], [21.9, 351.0], [22.0, 352.0], [22.1, 354.0], [22.2, 355.0], [22.3, 358.0], [22.4, 359.0], [22.5, 360.0], [22.6, 365.0], [22.7, 366.0], [22.8, 367.0], [22.9, 369.0], [23.0, 372.0], [23.1, 374.0], [23.2, 375.0], [23.3, 376.0], [23.4, 378.0], [23.5, 380.0], [23.6, 381.0], [23.7, 384.0], [23.8, 385.0], [23.9, 387.0], [24.0, 388.0], [24.1, 390.0], [24.2, 392.0], [24.3, 394.0], [24.4, 395.0], [24.5, 395.0], [24.6, 397.0], [24.7, 398.0], [24.8, 399.0], [24.9, 401.0], [25.0, 402.0], [25.1, 404.0], [25.2, 406.0], [25.3, 407.0], [25.4, 407.0], [25.5, 409.0], [25.6, 411.0], [25.7, 413.0], [25.8, 415.0], [25.9, 417.0], [26.0, 419.0], [26.1, 421.0], [26.2, 422.0], [26.3, 423.0], [26.4, 424.0], [26.5, 426.0], [26.6, 428.0], [26.7, 429.0], [26.8, 431.0], [26.9, 432.0], [27.0, 432.0], [27.1, 434.0], [27.2, 437.0], [27.3, 439.0], [27.4, 440.0], [27.5, 441.0], [27.6, 442.0], [27.7, 443.0], [27.8, 444.0], [27.9, 445.0], [28.0, 447.0], [28.1, 449.0], [28.2, 450.0], [28.3, 452.0], [28.4, 453.0], [28.5, 455.0], [28.6, 459.0], [28.7, 463.0], [28.8, 466.0], [28.9, 468.0], [29.0, 471.0], [29.1, 473.0], [29.2, 476.0], [29.3, 479.0], [29.4, 479.0], [29.5, 482.0], [29.6, 484.0], [29.7, 486.0], [29.8, 487.0], [29.9, 491.0], [30.0, 492.0], [30.1, 494.0], [30.2, 496.0], [30.3, 498.0], [30.4, 502.0], [30.5, 503.0], [30.6, 507.0], [30.7, 507.0], [30.8, 509.0], [30.9, 511.0], [31.0, 515.0], [31.1, 516.0], [31.2, 518.0], [31.3, 521.0], [31.4, 524.0], [31.5, 527.0], [31.6, 529.0], [31.7, 532.0], [31.8, 535.0], [31.9, 535.0], [32.0, 536.0], [32.1, 539.0], [32.2, 541.0], [32.3, 543.0], [32.4, 545.0], [32.5, 546.0], [32.6, 547.0], [32.7, 549.0], [32.8, 551.0], [32.9, 552.0], [33.0, 554.0], [33.1, 555.0], [33.2, 558.0], [33.3, 560.0], [33.4, 563.0], [33.5, 565.0], [33.6, 566.0], [33.7, 567.0], [33.8, 570.0], [33.9, 572.0], [34.0, 574.0], [34.1, 576.0], [34.2, 577.0], [34.3, 578.0], [34.4, 580.0], [34.5, 582.0], [34.6, 584.0], [34.7, 587.0], [34.8, 587.0], [34.9, 589.0], [35.0, 593.0], [35.1, 594.0], [35.2, 596.0], [35.3, 597.0], [35.4, 601.0], [35.5, 603.0], [35.6, 605.0], [35.7, 607.0], [35.8, 608.0], [35.9, 610.0], [36.0, 612.0], [36.1, 614.0], [36.2, 616.0], [36.3, 618.0], [36.4, 621.0], [36.5, 623.0], [36.6, 624.0], [36.7, 626.0], [36.8, 628.0], [36.9, 629.0], [37.0, 632.0], [37.1, 633.0], [37.2, 635.0], [37.3, 637.0], [37.4, 639.0], [37.5, 640.0], [37.6, 640.0], [37.7, 641.0], [37.8, 644.0], [37.9, 645.0], [38.0, 646.0], [38.1, 648.0], [38.2, 650.0], [38.3, 652.0], [38.4, 654.0], [38.5, 655.0], [38.6, 656.0], [38.7, 659.0], [38.8, 660.0], [38.9, 662.0], [39.0, 663.0], [39.1, 665.0], [39.2, 667.0], [39.3, 669.0], [39.4, 671.0], [39.5, 672.0], [39.6, 673.0], [39.7, 675.0], [39.8, 676.0], [39.9, 678.0], [40.0, 679.0], [40.1, 682.0], [40.2, 683.0], [40.3, 685.0], [40.4, 686.0], [40.5, 687.0], [40.6, 689.0], [40.7, 690.0], [40.8, 692.0], [40.9, 693.0], [41.0, 694.0], [41.1, 697.0], [41.2, 698.0], [41.3, 699.0], [41.4, 700.0], [41.5, 702.0], [41.6, 703.0], [41.7, 706.0], [41.8, 707.0], [41.9, 708.0], [42.0, 709.0], [42.1, 710.0], [42.2, 711.0], [42.3, 712.0], [42.4, 714.0], [42.5, 715.0], [42.6, 716.0], [42.7, 719.0], [42.8, 720.0], [42.9, 721.0], [43.0, 723.0], [43.1, 725.0], [43.2, 727.0], [43.3, 728.0], [43.4, 730.0], [43.5, 731.0], [43.6, 732.0], [43.7, 735.0], [43.8, 736.0], [43.9, 737.0], [44.0, 738.0], [44.1, 739.0], [44.2, 739.0], [44.3, 740.0], [44.4, 742.0], [44.5, 742.0], [44.6, 743.0], [44.7, 744.0], [44.8, 746.0], [44.9, 747.0], [45.0, 748.0], [45.1, 749.0], [45.2, 750.0], [45.3, 750.0], [45.4, 753.0], [45.5, 754.0], [45.6, 754.0], [45.7, 755.0], [45.8, 756.0], [45.9, 757.0], [46.0, 758.0], [46.1, 759.0], [46.2, 760.0], [46.3, 761.0], [46.4, 761.0], [46.5, 763.0], [46.6, 766.0], [46.7, 767.0], [46.8, 769.0], [46.9, 770.0], [47.0, 772.0], [47.1, 773.0], [47.2, 774.0], [47.3, 775.0], [47.4, 777.0], [47.5, 778.0], [47.6, 780.0], [47.7, 781.0], [47.8, 781.0], [47.9, 782.0], [48.0, 783.0], [48.1, 783.0], [48.2, 785.0], [48.3, 787.0], [48.4, 789.0], [48.5, 791.0], [48.6, 792.0], [48.7, 793.0], [48.8, 794.0], [48.9, 796.0], [49.0, 797.0], [49.1, 798.0], [49.2, 798.0], [49.3, 799.0], [49.4, 801.0], [49.5, 803.0], [49.6, 804.0], [49.7, 805.0], [49.8, 807.0], [49.9, 809.0], [50.0, 811.0], [50.1, 812.0], [50.2, 812.0], [50.3, 813.0], [50.4, 814.0], [50.5, 815.0], [50.6, 816.0], [50.7, 818.0], [50.8, 819.0], [50.9, 820.0], [51.0, 821.0], [51.1, 823.0], [51.2, 825.0], [51.3, 827.0], [51.4, 828.0], [51.5, 830.0], [51.6, 831.0], [51.7, 832.0], [51.8, 835.0], [51.9, 836.0], [52.0, 837.0], [52.1, 838.0], [52.2, 840.0], [52.3, 841.0], [52.4, 843.0], [52.5, 845.0], [52.6, 848.0], [52.7, 850.0], [52.8, 852.0], [52.9, 855.0], [53.0, 859.0], [53.1, 862.0], [53.2, 864.0], [53.3, 866.0], [53.4, 867.0], [53.5, 872.0], [53.6, 873.0], [53.7, 875.0], [53.8, 877.0], [53.9, 878.0], [54.0, 879.0], [54.1, 881.0], [54.2, 882.0], [54.3, 883.0], [54.4, 886.0], [54.5, 888.0], [54.6, 889.0], [54.7, 892.0], [54.8, 895.0], [54.9, 896.0], [55.0, 899.0], [55.1, 901.0], [55.2, 904.0], [55.3, 905.0], [55.4, 906.0], [55.5, 908.0], [55.6, 910.0], [55.7, 914.0], [55.8, 916.0], [55.9, 919.0], [56.0, 921.0], [56.1, 922.0], [56.2, 923.0], [56.3, 925.0], [56.4, 928.0], [56.5, 929.0], [56.6, 931.0], [56.7, 932.0], [56.8, 934.0], [56.9, 935.0], [57.0, 936.0], [57.1, 939.0], [57.2, 941.0], [57.3, 942.0], [57.4, 943.0], [57.5, 945.0], [57.6, 947.0], [57.7, 948.0], [57.8, 951.0], [57.9, 953.0], [58.0, 954.0], [58.1, 956.0], [58.2, 958.0], [58.3, 960.0], [58.4, 961.0], [58.5, 962.0], [58.6, 964.0], [58.7, 965.0], [58.8, 968.0], [58.9, 968.0], [59.0, 970.0], [59.1, 971.0], [59.2, 974.0], [59.3, 975.0], [59.4, 976.0], [59.5, 978.0], [59.6, 979.0], [59.7, 981.0], [59.8, 982.0], [59.9, 984.0], [60.0, 986.0], [60.1, 987.0], [60.2, 990.0], [60.3, 990.0], [60.4, 992.0], [60.5, 993.0], [60.6, 995.0], [60.7, 995.0], [60.8, 997.0], [60.9, 998.0], [61.0, 999.0], [61.1, 1000.0], [61.2, 1002.0], [61.3, 1003.0], [61.4, 1004.0], [61.5, 1005.0], [61.6, 1006.0], [61.7, 1008.0], [61.8, 1009.0], [61.9, 1011.0], [62.0, 1012.0], [62.1, 1013.0], [62.2, 1015.0], [62.3, 1016.0], [62.4, 1017.0], [62.5, 1018.0], [62.6, 1019.0], [62.7, 1021.0], [62.8, 1022.0], [62.9, 1024.0], [63.0, 1025.0], [63.1, 1026.0], [63.2, 1028.0], [63.3, 1029.0], [63.4, 1031.0], [63.5, 1031.0], [63.6, 1033.0], [63.7, 1033.0], [63.8, 1034.0], [63.9, 1035.0], [64.0, 1036.0], [64.1, 1038.0], [64.2, 1040.0], [64.3, 1041.0], [64.4, 1043.0], [64.5, 1045.0], [64.6, 1045.0], [64.7, 1047.0], [64.8, 1048.0], [64.9, 1050.0], [65.0, 1051.0], [65.1, 1053.0], [65.2, 1053.0], [65.3, 1054.0], [65.4, 1055.0], [65.5, 1058.0], [65.6, 1059.0], [65.7, 1060.0], [65.8, 1060.0], [65.9, 1061.0], [66.0, 1062.0], [66.1, 1063.0], [66.2, 1064.0], [66.3, 1066.0], [66.4, 1067.0], [66.5, 1069.0], [66.6, 1071.0], [66.7, 1072.0], [66.8, 1074.0], [66.9, 1076.0], [67.0, 1077.0], [67.1, 1078.0], [67.2, 1080.0], [67.3, 1082.0], [67.4, 1082.0], [67.5, 1084.0], [67.6, 1085.0], [67.7, 1087.0], [67.8, 1089.0], [67.9, 1091.0], [68.0, 1092.0], [68.1, 1096.0], [68.2, 1099.0], [68.3, 1100.0], [68.4, 1102.0], [68.5, 1104.0], [68.6, 1106.0], [68.7, 1107.0], [68.8, 1108.0], [68.9, 1110.0], [69.0, 1113.0], [69.1, 1113.0], [69.2, 1114.0], [69.3, 1115.0], [69.4, 1117.0], [69.5, 1118.0], [69.6, 1119.0], [69.7, 1121.0], [69.8, 1123.0], [69.9, 1124.0], [70.0, 1125.0], [70.1, 1126.0], [70.2, 1127.0], [70.3, 1130.0], [70.4, 1132.0], [70.5, 1132.0], [70.6, 1135.0], [70.7, 1136.0], [70.8, 1137.0], [70.9, 1139.0], [71.0, 1140.0], [71.1, 1141.0], [71.2, 1142.0], [71.3, 1145.0], [71.4, 1145.0], [71.5, 1146.0], [71.6, 1147.0], [71.7, 1149.0], [71.8, 1149.0], [71.9, 1150.0], [72.0, 1152.0], [72.1, 1154.0], [72.2, 1155.0], [72.3, 1157.0], [72.4, 1159.0], [72.5, 1160.0], [72.6, 1160.0], [72.7, 1162.0], [72.8, 1163.0], [72.9, 1164.0], [73.0, 1165.0], [73.1, 1166.0], [73.2, 1168.0], [73.3, 1169.0], [73.4, 1170.0], [73.5, 1171.0], [73.6, 1172.0], [73.7, 1172.0], [73.8, 1174.0], [73.9, 1175.0], [74.0, 1176.0], [74.1, 1178.0], [74.2, 1179.0], [74.3, 1180.0], [74.4, 1181.0], [74.5, 1182.0], [74.6, 1184.0], [74.7, 1185.0], [74.8, 1187.0], [74.9, 1188.0], [75.0, 1189.0], [75.1, 1190.0], [75.2, 1191.0], [75.3, 1193.0], [75.4, 1194.0], [75.5, 1194.0], [75.6, 1195.0], [75.7, 1197.0], [75.8, 1197.0], [75.9, 1198.0], [76.0, 1199.0], [76.1, 1202.0], [76.2, 1202.0], [76.3, 1204.0], [76.4, 1205.0], [76.5, 1206.0], [76.6, 1207.0], [76.7, 1208.0], [76.8, 1209.0], [76.9, 1209.0], [77.0, 1210.0], [77.1, 1211.0], [77.2, 1212.0], [77.3, 1213.0], [77.4, 1213.0], [77.5, 1215.0], [77.6, 1217.0], [77.7, 1218.0], [77.8, 1218.0], [77.9, 1220.0], [78.0, 1222.0], [78.1, 1222.0], [78.2, 1223.0], [78.3, 1224.0], [78.4, 1225.0], [78.5, 1226.0], [78.6, 1229.0], [78.7, 1230.0], [78.8, 1232.0], [78.9, 1233.0], [79.0, 1234.0], [79.1, 1236.0], [79.2, 1237.0], [79.3, 1238.0], [79.4, 1240.0], [79.5, 1241.0], [79.6, 1241.0], [79.7, 1243.0], [79.8, 1243.0], [79.9, 1246.0], [80.0, 1247.0], [80.1, 1247.0], [80.2, 1248.0], [80.3, 1249.0], [80.4, 1250.0], [80.5, 1251.0], [80.6, 1252.0], [80.7, 1252.0], [80.8, 1253.0], [80.9, 1254.0], [81.0, 1255.0], [81.1, 1256.0], [81.2, 1258.0], [81.3, 1259.0], [81.4, 1260.0], [81.5, 1261.0], [81.6, 1262.0], [81.7, 1264.0], [81.8, 1265.0], [81.9, 1267.0], [82.0, 1268.0], [82.1, 1270.0], [82.2, 1271.0], [82.3, 1273.0], [82.4, 1276.0], [82.5, 1278.0], [82.6, 1280.0], [82.7, 1281.0], [82.8, 1284.0], [82.9, 1286.0], [83.0, 1287.0], [83.1, 1288.0], [83.2, 1292.0], [83.3, 1293.0], [83.4, 1299.0], [83.5, 1303.0], [83.6, 1304.0], [83.7, 1307.0], [83.8, 1314.0], [83.9, 1316.0], [84.0, 1321.0], [84.1, 1323.0], [84.2, 1325.0], [84.3, 1328.0], [84.4, 1330.0], [84.5, 1335.0], [84.6, 1337.0], [84.7, 1341.0], [84.8, 1343.0], [84.9, 1346.0], [85.0, 1349.0], [85.1, 1352.0], [85.2, 1356.0], [85.3, 1358.0], [85.4, 1360.0], [85.5, 1361.0], [85.6, 1365.0], [85.7, 1367.0], [85.8, 1371.0], [85.9, 1376.0], [86.0, 1379.0], [86.1, 1381.0], [86.2, 1383.0], [86.3, 1388.0], [86.4, 1391.0], [86.5, 1395.0], [86.6, 1399.0], [86.7, 1402.0], [86.8, 1404.0], [86.9, 1408.0], [87.0, 1410.0], [87.1, 1417.0], [87.2, 1421.0], [87.3, 1424.0], [87.4, 1426.0], [87.5, 1431.0], [87.6, 1435.0], [87.7, 1437.0], [87.8, 1441.0], [87.9, 1448.0], [88.0, 1453.0], [88.1, 1459.0], [88.2, 1467.0], [88.3, 1471.0], [88.4, 1476.0], [88.5, 1481.0], [88.6, 1488.0], [88.7, 1497.0], [88.8, 1512.0], [88.9, 1522.0], [89.0, 1542.0], [89.1, 1551.0], [89.2, 1586.0], [89.3, 1599.0], [89.4, 1614.0], [89.5, 1643.0], [89.6, 1663.0], [89.7, 1681.0], [89.8, 1706.0], [89.9, 1732.0], [90.0, 1747.0], [90.1, 1753.0], [90.2, 1761.0], [90.3, 1772.0], [90.4, 1779.0], [90.5, 1783.0], [90.6, 1785.0], [90.7, 1791.0], [90.8, 1796.0], [90.9, 1797.0], [91.0, 1800.0], [91.1, 1805.0], [91.2, 1806.0], [91.3, 1810.0], [91.4, 1813.0], [91.5, 1815.0], [91.6, 1816.0], [91.7, 1821.0], [91.8, 1828.0], [91.9, 1831.0], [92.0, 1835.0], [92.1, 1837.0], [92.2, 1838.0], [92.3, 1841.0], [92.4, 1844.0], [92.5, 1845.0], [92.6, 1848.0], [92.7, 1851.0], [92.8, 1852.0], [92.9, 1855.0], [93.0, 1860.0], [93.1, 1863.0], [93.2, 1866.0], [93.3, 1870.0], [93.4, 1872.0], [93.5, 1874.0], [93.6, 1878.0], [93.7, 1879.0], [93.8, 1882.0], [93.9, 1883.0], [94.0, 1885.0], [94.1, 1887.0], [94.2, 1889.0], [94.3, 1891.0], [94.4, 1894.0], [94.5, 1897.0], [94.6, 1901.0], [94.7, 1902.0], [94.8, 1902.0], [94.9, 1904.0], [95.0, 1906.0], [95.1, 1909.0], [95.2, 1910.0], [95.3, 1911.0], [95.4, 1914.0], [95.5, 1917.0], [95.6, 1919.0], [95.7, 1922.0], [95.8, 1925.0], [95.9, 1927.0], [96.0, 1929.0], [96.1, 1931.0], [96.2, 1933.0], [96.3, 1937.0], [96.4, 1940.0], [96.5, 1943.0], [96.6, 1945.0], [96.7, 1948.0], [96.8, 1951.0], [96.9, 1953.0], [97.0, 1958.0], [97.1, 1962.0], [97.2, 1965.0], [97.3, 1968.0], [97.4, 1971.0], [97.5, 1975.0], [97.6, 1979.0], [97.7, 1986.0], [97.8, 1991.0], [97.9, 1995.0], [98.0, 1996.0], [98.1, 2002.0], [98.2, 2007.0], [98.3, 2015.0], [98.4, 2019.0], [98.5, 2026.0], [98.6, 2037.0], [98.7, 2044.0], [98.8, 2051.0], [98.9, 2057.0], [99.0, 2078.0], [99.1, 2099.0], [99.2, 2125.0], [99.3, 2127.0], [99.4, 2156.0], [99.5, 2172.0], [99.6, 2197.0], [99.7, 2295.0], [99.8, 3055.0], [99.9, 3075.0]], "isOverall": false, "label": "02查看商品详情", "isController": false}, {"data": [[0.0, 30.0], [0.1, 34.0], [0.2, 36.0], [0.3, 38.0], [0.4, 40.0], [0.5, 42.0], [0.6, 43.0], [0.7, 46.0], [0.8, 49.0], [0.9, 50.0], [1.0, 51.0], [1.1, 52.0], [1.2, 53.0], [1.3, 55.0], [1.4, 57.0], [1.5, 58.0], [1.6, 60.0], [1.7, 64.0], [1.8, 65.0], [1.9, 69.0], [2.0, 71.0], [2.1, 73.0], [2.2, 74.0], [2.3, 76.0], [2.4, 78.0], [2.5, 79.0], [2.6, 80.0], [2.7, 81.0], [2.8, 82.0], [2.9, 83.0], [3.0, 83.0], [3.1, 84.0], [3.2, 84.0], [3.3, 85.0], [3.4, 85.0], [3.5, 86.0], [3.6, 87.0], [3.7, 87.0], [3.8, 87.0], [3.9, 88.0], [4.0, 89.0], [4.1, 89.0], [4.2, 89.0], [4.3, 90.0], [4.4, 90.0], [4.5, 91.0], [4.6, 91.0], [4.7, 92.0], [4.8, 92.0], [4.9, 92.0], [5.0, 93.0], [5.1, 94.0], [5.2, 94.0], [5.3, 95.0], [5.4, 95.0], [5.5, 95.0], [5.6, 96.0], [5.7, 97.0], [5.8, 97.0], [5.9, 98.0], [6.0, 98.0], [6.1, 98.0], [6.2, 99.0], [6.3, 100.0], [6.4, 100.0], [6.5, 100.0], [6.6, 100.0], [6.7, 101.0], [6.8, 102.0], [6.9, 102.0], [7.0, 103.0], [7.1, 103.0], [7.2, 104.0], [7.3, 104.0], [7.4, 105.0], [7.5, 105.0], [7.6, 105.0], [7.7, 105.0], [7.8, 106.0], [7.9, 106.0], [8.0, 107.0], [8.1, 107.0], [8.2, 107.0], [8.3, 108.0], [8.4, 108.0], [8.5, 109.0], [8.6, 109.0], [8.7, 109.0], [8.8, 109.0], [8.9, 110.0], [9.0, 111.0], [9.1, 111.0], [9.2, 111.0], [9.3, 112.0], [9.4, 112.0], [9.5, 113.0], [9.6, 113.0], [9.7, 113.0], [9.8, 114.0], [9.9, 114.0], [10.0, 115.0], [10.1, 115.0], [10.2, 115.0], [10.3, 116.0], [10.4, 116.0], [10.5, 116.0], [10.6, 117.0], [10.7, 117.0], [10.8, 117.0], [10.9, 118.0], [11.0, 118.0], [11.1, 118.0], [11.2, 119.0], [11.3, 119.0], [11.4, 119.0], [11.5, 119.0], [11.6, 120.0], [11.7, 120.0], [11.8, 120.0], [11.9, 121.0], [12.0, 121.0], [12.1, 121.0], [12.2, 121.0], [12.3, 122.0], [12.4, 122.0], [12.5, 122.0], [12.6, 122.0], [12.7, 123.0], [12.8, 123.0], [12.9, 123.0], [13.0, 124.0], [13.1, 124.0], [13.2, 125.0], [13.3, 125.0], [13.4, 126.0], [13.5, 126.0], [13.6, 127.0], [13.7, 127.0], [13.8, 128.0], [13.9, 128.0], [14.0, 129.0], [14.1, 129.0], [14.2, 129.0], [14.3, 130.0], [14.4, 130.0], [14.5, 131.0], [14.6, 131.0], [14.7, 132.0], [14.8, 133.0], [14.9, 133.0], [15.0, 134.0], [15.1, 134.0], [15.2, 134.0], [15.3, 135.0], [15.4, 135.0], [15.5, 136.0], [15.6, 136.0], [15.7, 137.0], [15.8, 137.0], [15.9, 137.0], [16.0, 138.0], [16.1, 138.0], [16.2, 139.0], [16.3, 139.0], [16.4, 140.0], [16.5, 140.0], [16.6, 141.0], [16.7, 141.0], [16.8, 142.0], [16.9, 142.0], [17.0, 143.0], [17.1, 143.0], [17.2, 145.0], [17.3, 146.0], [17.4, 146.0], [17.5, 146.0], [17.6, 148.0], [17.7, 148.0], [17.8, 150.0], [17.9, 150.0], [18.0, 151.0], [18.1, 152.0], [18.2, 153.0], [18.3, 153.0], [18.4, 154.0], [18.5, 154.0], [18.6, 155.0], [18.7, 157.0], [18.8, 157.0], [18.9, 157.0], [19.0, 158.0], [19.1, 159.0], [19.2, 160.0], [19.3, 161.0], [19.4, 163.0], [19.5, 164.0], [19.6, 166.0], [19.7, 169.0], [19.8, 170.0], [19.9, 171.0], [20.0, 172.0], [20.1, 173.0], [20.2, 173.0], [20.3, 174.0], [20.4, 175.0], [20.5, 177.0], [20.6, 178.0], [20.7, 179.0], [20.8, 180.0], [20.9, 182.0], [21.0, 183.0], [21.1, 185.0], [21.2, 187.0], [21.3, 189.0], [21.4, 189.0], [21.5, 191.0], [21.6, 193.0], [21.7, 195.0], [21.8, 197.0], [21.9, 198.0], [22.0, 200.0], [22.1, 201.0], [22.2, 202.0], [22.3, 203.0], [22.4, 205.0], [22.5, 207.0], [22.6, 208.0], [22.7, 209.0], [22.8, 209.0], [22.9, 211.0], [23.0, 211.0], [23.1, 212.0], [23.2, 213.0], [23.3, 214.0], [23.4, 215.0], [23.5, 216.0], [23.6, 217.0], [23.7, 218.0], [23.8, 220.0], [23.9, 221.0], [24.0, 222.0], [24.1, 223.0], [24.2, 224.0], [24.3, 225.0], [24.4, 225.0], [24.5, 227.0], [24.6, 229.0], [24.7, 230.0], [24.8, 232.0], [24.9, 233.0], [25.0, 236.0], [25.1, 237.0], [25.2, 237.0], [25.3, 240.0], [25.4, 241.0], [25.5, 244.0], [25.6, 245.0], [25.7, 246.0], [25.8, 249.0], [25.9, 249.0], [26.0, 251.0], [26.1, 253.0], [26.2, 254.0], [26.3, 255.0], [26.4, 256.0], [26.5, 257.0], [26.6, 258.0], [26.7, 259.0], [26.8, 261.0], [26.9, 262.0], [27.0, 263.0], [27.1, 266.0], [27.2, 268.0], [27.3, 269.0], [27.4, 270.0], [27.5, 272.0], [27.6, 273.0], [27.7, 277.0], [27.8, 278.0], [27.9, 279.0], [28.0, 280.0], [28.1, 282.0], [28.2, 285.0], [28.3, 285.0], [28.4, 286.0], [28.5, 289.0], [28.6, 291.0], [28.7, 292.0], [28.8, 294.0], [28.9, 295.0], [29.0, 297.0], [29.1, 299.0], [29.2, 300.0], [29.3, 301.0], [29.4, 302.0], [29.5, 303.0], [29.6, 305.0], [29.7, 308.0], [29.8, 310.0], [29.9, 313.0], [30.0, 314.0], [30.1, 316.0], [30.2, 316.0], [30.3, 319.0], [30.4, 320.0], [30.5, 322.0], [30.6, 324.0], [30.7, 325.0], [30.8, 326.0], [30.9, 327.0], [31.0, 329.0], [31.1, 330.0], [31.2, 331.0], [31.3, 332.0], [31.4, 335.0], [31.5, 336.0], [31.6, 338.0], [31.7, 339.0], [31.8, 341.0], [31.9, 342.0], [32.0, 343.0], [32.1, 344.0], [32.2, 345.0], [32.3, 347.0], [32.4, 347.0], [32.5, 348.0], [32.6, 349.0], [32.7, 351.0], [32.8, 352.0], [32.9, 352.0], [33.0, 355.0], [33.1, 357.0], [33.2, 358.0], [33.3, 359.0], [33.4, 360.0], [33.5, 361.0], [33.6, 363.0], [33.7, 364.0], [33.8, 365.0], [33.9, 367.0], [34.0, 369.0], [34.1, 370.0], [34.2, 373.0], [34.3, 374.0], [34.4, 377.0], [34.5, 378.0], [34.6, 379.0], [34.7, 381.0], [34.8, 383.0], [34.9, 384.0], [35.0, 385.0], [35.1, 387.0], [35.2, 388.0], [35.3, 390.0], [35.4, 391.0], [35.5, 393.0], [35.6, 394.0], [35.7, 395.0], [35.8, 397.0], [35.9, 399.0], [36.0, 401.0], [36.1, 402.0], [36.2, 403.0], [36.3, 404.0], [36.4, 405.0], [36.5, 406.0], [36.6, 407.0], [36.7, 409.0], [36.8, 410.0], [36.9, 411.0], [37.0, 413.0], [37.1, 414.0], [37.2, 414.0], [37.3, 416.0], [37.4, 417.0], [37.5, 417.0], [37.6, 420.0], [37.7, 420.0], [37.8, 421.0], [37.9, 422.0], [38.0, 423.0], [38.1, 424.0], [38.2, 425.0], [38.3, 426.0], [38.4, 427.0], [38.5, 427.0], [38.6, 428.0], [38.7, 429.0], [38.8, 430.0], [38.9, 430.0], [39.0, 431.0], [39.1, 431.0], [39.2, 432.0], [39.3, 432.0], [39.4, 433.0], [39.5, 434.0], [39.6, 434.0], [39.7, 435.0], [39.8, 437.0], [39.9, 437.0], [40.0, 438.0], [40.1, 438.0], [40.2, 439.0], [40.3, 440.0], [40.4, 440.0], [40.5, 441.0], [40.6, 441.0], [40.7, 441.0], [40.8, 442.0], [40.9, 442.0], [41.0, 443.0], [41.1, 444.0], [41.2, 445.0], [41.3, 445.0], [41.4, 446.0], [41.5, 446.0], [41.6, 447.0], [41.7, 447.0], [41.8, 448.0], [41.9, 449.0], [42.0, 449.0], [42.1, 450.0], [42.2, 450.0], [42.3, 451.0], [42.4, 451.0], [42.5, 452.0], [42.6, 453.0], [42.7, 453.0], [42.8, 454.0], [42.9, 455.0], [43.0, 456.0], [43.1, 456.0], [43.2, 457.0], [43.3, 458.0], [43.4, 458.0], [43.5, 458.0], [43.6, 459.0], [43.7, 459.0], [43.8, 460.0], [43.9, 460.0], [44.0, 461.0], [44.1, 461.0], [44.2, 461.0], [44.3, 461.0], [44.4, 462.0], [44.5, 462.0], [44.6, 463.0], [44.7, 463.0], [44.8, 463.0], [44.9, 464.0], [45.0, 464.0], [45.1, 465.0], [45.2, 465.0], [45.3, 466.0], [45.4, 466.0], [45.5, 467.0], [45.6, 467.0], [45.7, 467.0], [45.8, 468.0], [45.9, 468.0], [46.0, 468.0], [46.1, 469.0], [46.2, 469.0], [46.3, 470.0], [46.4, 470.0], [46.5, 471.0], [46.6, 471.0], [46.7, 471.0], [46.8, 472.0], [46.9, 472.0], [47.0, 473.0], [47.1, 473.0], [47.2, 474.0], [47.3, 475.0], [47.4, 475.0], [47.5, 476.0], [47.6, 476.0], [47.7, 476.0], [47.8, 477.0], [47.9, 477.0], [48.0, 478.0], [48.1, 478.0], [48.2, 479.0], [48.3, 479.0], [48.4, 480.0], [48.5, 481.0], [48.6, 481.0], [48.7, 481.0], [48.8, 482.0], [48.9, 483.0], [49.0, 484.0], [49.1, 484.0], [49.2, 485.0], [49.3, 486.0], [49.4, 486.0], [49.5, 486.0], [49.6, 487.0], [49.7, 488.0], [49.8, 489.0], [49.9, 489.0], [50.0, 490.0], [50.1, 491.0], [50.2, 491.0], [50.3, 492.0], [50.4, 492.0], [50.5, 493.0], [50.6, 494.0], [50.7, 494.0], [50.8, 495.0], [50.9, 496.0], [51.0, 497.0], [51.1, 497.0], [51.2, 498.0], [51.3, 499.0], [51.4, 499.0], [51.5, 500.0], [51.6, 501.0], [51.7, 501.0], [51.8, 502.0], [51.9, 502.0], [52.0, 503.0], [52.1, 503.0], [52.2, 504.0], [52.3, 504.0], [52.4, 505.0], [52.5, 505.0], [52.6, 506.0], [52.7, 507.0], [52.8, 507.0], [52.9, 508.0], [53.0, 508.0], [53.1, 509.0], [53.2, 510.0], [53.3, 510.0], [53.4, 511.0], [53.5, 512.0], [53.6, 512.0], [53.7, 513.0], [53.8, 514.0], [53.9, 516.0], [54.0, 516.0], [54.1, 517.0], [54.2, 518.0], [54.3, 518.0], [54.4, 519.0], [54.5, 520.0], [54.6, 520.0], [54.7, 521.0], [54.8, 522.0], [54.9, 522.0], [55.0, 523.0], [55.1, 524.0], [55.2, 525.0], [55.3, 526.0], [55.4, 526.0], [55.5, 526.0], [55.6, 528.0], [55.7, 528.0], [55.8, 529.0], [55.9, 530.0], [56.0, 531.0], [56.1, 532.0], [56.2, 532.0], [56.3, 533.0], [56.4, 534.0], [56.5, 535.0], [56.6, 536.0], [56.7, 537.0], [56.8, 537.0], [56.9, 538.0], [57.0, 539.0], [57.1, 539.0], [57.2, 540.0], [57.3, 541.0], [57.4, 543.0], [57.5, 544.0], [57.6, 544.0], [57.7, 546.0], [57.8, 547.0], [57.9, 548.0], [58.0, 549.0], [58.1, 550.0], [58.2, 551.0], [58.3, 552.0], [58.4, 553.0], [58.5, 554.0], [58.6, 554.0], [58.7, 556.0], [58.8, 557.0], [58.9, 558.0], [59.0, 561.0], [59.1, 561.0], [59.2, 564.0], [59.3, 565.0], [59.4, 566.0], [59.5, 567.0], [59.6, 569.0], [59.7, 570.0], [59.8, 570.0], [59.9, 572.0], [60.0, 572.0], [60.1, 574.0], [60.2, 575.0], [60.3, 577.0], [60.4, 578.0], [60.5, 579.0], [60.6, 580.0], [60.7, 581.0], [60.8, 582.0], [60.9, 583.0], [61.0, 585.0], [61.1, 586.0], [61.2, 587.0], [61.3, 587.0], [61.4, 590.0], [61.5, 591.0], [61.6, 591.0], [61.7, 592.0], [61.8, 594.0], [61.9, 595.0], [62.0, 596.0], [62.1, 597.0], [62.2, 598.0], [62.3, 598.0], [62.4, 602.0], [62.5, 603.0], [62.6, 604.0], [62.7, 606.0], [62.8, 608.0], [62.9, 610.0], [63.0, 610.0], [63.1, 612.0], [63.2, 614.0], [63.3, 615.0], [63.4, 618.0], [63.5, 619.0], [63.6, 620.0], [63.7, 622.0], [63.8, 624.0], [63.9, 627.0], [64.0, 628.0], [64.1, 631.0], [64.2, 633.0], [64.3, 635.0], [64.4, 637.0], [64.5, 637.0], [64.6, 639.0], [64.7, 641.0], [64.8, 642.0], [64.9, 642.0], [65.0, 645.0], [65.1, 646.0], [65.2, 648.0], [65.3, 649.0], [65.4, 651.0], [65.5, 653.0], [65.6, 656.0], [65.7, 657.0], [65.8, 659.0], [65.9, 661.0], [66.0, 662.0], [66.1, 663.0], [66.2, 665.0], [66.3, 667.0], [66.4, 668.0], [66.5, 670.0], [66.6, 670.0], [66.7, 672.0], [66.8, 674.0], [66.9, 675.0], [67.0, 678.0], [67.1, 681.0], [67.2, 683.0], [67.3, 685.0], [67.4, 687.0], [67.5, 688.0], [67.6, 691.0], [67.7, 692.0], [67.8, 693.0], [67.9, 695.0], [68.0, 698.0], [68.1, 700.0], [68.2, 703.0], [68.3, 706.0], [68.4, 710.0], [68.5, 713.0], [68.6, 714.0], [68.7, 715.0], [68.8, 717.0], [68.9, 720.0], [69.0, 723.0], [69.1, 724.0], [69.2, 725.0], [69.3, 727.0], [69.4, 728.0], [69.5, 731.0], [69.6, 732.0], [69.7, 734.0], [69.8, 735.0], [69.9, 736.0], [70.0, 738.0], [70.1, 739.0], [70.2, 741.0], [70.3, 743.0], [70.4, 743.0], [70.5, 745.0], [70.6, 746.0], [70.7, 747.0], [70.8, 750.0], [70.9, 752.0], [71.0, 754.0], [71.1, 755.0], [71.2, 756.0], [71.3, 760.0], [71.4, 761.0], [71.5, 764.0], [71.6, 765.0], [71.7, 766.0], [71.8, 768.0], [71.9, 769.0], [72.0, 770.0], [72.1, 772.0], [72.2, 772.0], [72.3, 774.0], [72.4, 775.0], [72.5, 777.0], [72.6, 778.0], [72.7, 779.0], [72.8, 780.0], [72.9, 782.0], [73.0, 784.0], [73.1, 785.0], [73.2, 786.0], [73.3, 788.0], [73.4, 790.0], [73.5, 792.0], [73.6, 793.0], [73.7, 795.0], [73.8, 797.0], [73.9, 799.0], [74.0, 800.0], [74.1, 803.0], [74.2, 806.0], [74.3, 808.0], [74.4, 811.0], [74.5, 813.0], [74.6, 815.0], [74.7, 820.0], [74.8, 824.0], [74.9, 828.0], [75.0, 835.0], [75.1, 839.0], [75.2, 844.0], [75.3, 847.0], [75.4, 848.0], [75.5, 850.0], [75.6, 852.0], [75.7, 855.0], [75.8, 858.0], [75.9, 860.0], [76.0, 862.0], [76.1, 864.0], [76.2, 868.0], [76.3, 871.0], [76.4, 872.0], [76.5, 877.0], [76.6, 879.0], [76.7, 882.0], [76.8, 886.0], [76.9, 888.0], [77.0, 890.0], [77.1, 893.0], [77.2, 896.0], [77.3, 898.0], [77.4, 901.0], [77.5, 905.0], [77.6, 907.0], [77.7, 909.0], [77.8, 911.0], [77.9, 913.0], [78.0, 914.0], [78.1, 916.0], [78.2, 917.0], [78.3, 919.0], [78.4, 920.0], [78.5, 922.0], [78.6, 925.0], [78.7, 926.0], [78.8, 929.0], [78.9, 931.0], [79.0, 933.0], [79.1, 933.0], [79.2, 935.0], [79.3, 935.0], [79.4, 936.0], [79.5, 936.0], [79.6, 937.0], [79.7, 939.0], [79.8, 941.0], [79.9, 942.0], [80.0, 943.0], [80.1, 944.0], [80.2, 945.0], [80.3, 946.0], [80.4, 946.0], [80.5, 948.0], [80.6, 949.0], [80.7, 950.0], [80.8, 950.0], [80.9, 952.0], [81.0, 953.0], [81.1, 953.0], [81.2, 954.0], [81.3, 955.0], [81.4, 956.0], [81.5, 957.0], [81.6, 959.0], [81.7, 960.0], [81.8, 962.0], [81.9, 963.0], [82.0, 965.0], [82.1, 966.0], [82.2, 967.0], [82.3, 968.0], [82.4, 969.0], [82.5, 970.0], [82.6, 971.0], [82.7, 972.0], [82.8, 973.0], [82.9, 973.0], [83.0, 974.0], [83.1, 974.0], [83.2, 975.0], [83.3, 975.0], [83.4, 977.0], [83.5, 978.0], [83.6, 978.0], [83.7, 979.0], [83.8, 980.0], [83.9, 981.0], [84.0, 981.0], [84.1, 982.0], [84.2, 983.0], [84.3, 984.0], [84.4, 985.0], [84.5, 986.0], [84.6, 986.0], [84.7, 987.0], [84.8, 988.0], [84.9, 989.0], [85.0, 989.0], [85.1, 990.0], [85.2, 992.0], [85.3, 993.0], [85.4, 994.0], [85.5, 995.0], [85.6, 996.0], [85.7, 997.0], [85.8, 997.0], [85.9, 998.0], [86.0, 999.0], [86.1, 1000.0], [86.2, 1002.0], [86.3, 1003.0], [86.4, 1004.0], [86.5, 1005.0], [86.6, 1006.0], [86.7, 1007.0], [86.8, 1008.0], [86.9, 1008.0], [87.0, 1009.0], [87.1, 1010.0], [87.2, 1011.0], [87.3, 1012.0], [87.4, 1013.0], [87.5, 1014.0], [87.6, 1015.0], [87.7, 1016.0], [87.8, 1017.0], [87.9, 1018.0], [88.0, 1019.0], [88.1, 1021.0], [88.2, 1022.0], [88.3, 1024.0], [88.4, 1026.0], [88.5, 1028.0], [88.6, 1029.0], [88.7, 1031.0], [88.8, 1032.0], [88.9, 1034.0], [89.0, 1034.0], [89.1, 1035.0], [89.2, 1036.0], [89.3, 1037.0], [89.4, 1039.0], [89.5, 1039.0], [89.6, 1041.0], [89.7, 1043.0], [89.8, 1044.0], [89.9, 1044.0], [90.0, 1046.0], [90.1, 1047.0], [90.2, 1048.0], [90.3, 1050.0], [90.4, 1053.0], [90.5, 1054.0], [90.6, 1055.0], [90.7, 1056.0], [90.8, 1058.0], [90.9, 1060.0], [91.0, 1061.0], [91.1, 1064.0], [91.2, 1066.0], [91.3, 1068.0], [91.4, 1069.0], [91.5, 1072.0], [91.6, 1073.0], [91.7, 1075.0], [91.8, 1080.0], [91.9, 1081.0], [92.0, 1083.0], [92.1, 1084.0], [92.2, 1086.0], [92.3, 1089.0], [92.4, 1090.0], [92.5, 1093.0], [92.6, 1095.0], [92.7, 1097.0], [92.8, 1098.0], [92.9, 1101.0], [93.0, 1103.0], [93.1, 1106.0], [93.2, 1107.0], [93.3, 1110.0], [93.4, 1112.0], [93.5, 1115.0], [93.6, 1118.0], [93.7, 1121.0], [93.8, 1124.0], [93.9, 1128.0], [94.0, 1129.0], [94.1, 1130.0], [94.2, 1135.0], [94.3, 1137.0], [94.4, 1141.0], [94.5, 1145.0], [94.6, 1148.0], [94.7, 1153.0], [94.8, 1158.0], [94.9, 1164.0], [95.0, 1168.0], [95.1, 1172.0], [95.2, 1174.0], [95.3, 1176.0], [95.4, 1180.0], [95.5, 1184.0], [95.6, 1186.0], [95.7, 1192.0], [95.8, 1195.0], [95.9, 1199.0], [96.0, 1203.0], [96.1, 1209.0], [96.2, 1217.0], [96.3, 1221.0], [96.4, 1224.0], [96.5, 1229.0], [96.6, 1233.0], [96.7, 1235.0], [96.8, 1241.0], [96.9, 1248.0], [97.0, 1251.0], [97.1, 1255.0], [97.2, 1261.0], [97.3, 1268.0], [97.4, 1281.0], [97.5, 1305.0], [97.6, 1323.0], [97.7, 1335.0], [97.8, 1376.0], [97.9, 1390.0], [98.0, 1397.0], [98.1, 1423.0], [98.2, 1523.0], [98.3, 1590.0], [98.4, 1663.0], [98.5, 1762.0], [98.6, 1790.0], [98.7, 1811.0], [98.8, 1821.0], [98.9, 1854.0], [99.0, 1863.0], [99.1, 1890.0], [99.2, 1903.0], [99.3, 1919.0], [99.4, 1929.0], [99.5, 1941.0], [99.6, 1965.0], [99.7, 1987.0], [99.8, 2020.0], [99.9, 2075.0]], "isOverall": false, "label": "01.进入首页", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 784.0, "series": [{"data": [[8200.0, 1.0], [0.0, 1.0], [600.0, 93.0], [700.0, 179.0], [800.0, 167.0], [900.0, 170.0], [1000.0, 200.0], [1100.0, 205.0], [1200.0, 227.0], [1300.0, 264.0], [1400.0, 285.0], [1500.0, 281.0], [1600.0, 280.0], [100.0, 226.0], [1700.0, 293.0], [1800.0, 209.0], [1900.0, 211.0], [2000.0, 198.0], [2100.0, 182.0], [2200.0, 171.0], [2300.0, 139.0], [2400.0, 109.0], [2500.0, 57.0], [2600.0, 45.0], [2700.0, 43.0], [2800.0, 57.0], [2900.0, 43.0], [3000.0, 15.0], [3100.0, 12.0], [200.0, 246.0], [3200.0, 2.0], [3300.0, 3.0], [3600.0, 1.0], [4200.0, 1.0], [4300.0, 1.0], [300.0, 87.0], [400.0, 166.0], [500.0, 130.0]], "isOverall": false, "label": "事务控制器", "isController": true}, {"data": [[0.0, 374.0], [600.0, 299.0], [700.0, 400.0], [800.0, 286.0], [900.0, 298.0], [1000.0, 360.0], [1100.0, 389.0], [1200.0, 370.0], [1300.0, 161.0], [1400.0, 104.0], [1500.0, 30.0], [100.0, 415.0], [1600.0, 23.0], [1700.0, 61.0], [1800.0, 179.0], [1900.0, 176.0], [2000.0, 51.0], [2100.0, 26.0], [2200.0, 5.0], [2300.0, 2.0], [3000.0, 10.0], [200.0, 158.0], [3500.0, 1.0], [300.0, 295.0], [400.0, 275.0], [500.0, 251.0], [8000.0, 1.0]], "isOverall": false, "label": "02查看商品详情", "isController": false}, {"data": [[0.0, 314.0], [2100.0, 1.0], [600.0, 287.0], [700.0, 296.0], [3000.0, 2.0], [200.0, 360.0], [800.0, 168.0], [900.0, 436.0], [1000.0, 338.0], [1100.0, 154.0], [300.0, 340.0], [1200.0, 77.0], [1300.0, 27.0], [1400.0, 8.0], [1500.0, 8.0], [100.0, 784.0], [400.0, 774.0], [1600.0, 6.0], [1700.0, 9.0], [1800.0, 28.0], [1900.0, 30.0], [500.0, 545.0], [2000.0, 8.0]], "isOverall": false, "label": "01.进入首页", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 656.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5248.0, "series": [{"data": [[1.0, 5248.0]], "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[0.0, 4096.0]], "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[2.0, 656.0]], "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                },
                colors: ["#9ACD32", "yellow", "orange", "#FF6347"]                
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 48.89214380825564, "minX": 1.56699414E12, "maxY": 50.0, "series": [{"data": [[1.56699444E12, 48.89214380825564], [1.56699414E12, 50.0], [1.56699426E12, 50.0], [1.5669942E12, 50.0], [1.56699438E12, 50.0], [1.56699432E12, 50.0]], "isOverall": false, "label": "商品详情场景", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56699444E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 43.0, "minX": 1.0, "maxY": 2799.0, "series": [{"data": [[33.0, 1654.0], [32.0, 1569.0], [2.0, 142.0], [35.0, 1258.0], [37.0, 2346.0], [36.0, 2279.0], [39.0, 1117.0], [38.0, 2361.0], [41.0, 878.0], [40.0, 587.0], [43.0, 849.0], [42.0, 1360.0], [45.0, 888.0], [44.0, 379.0], [47.0, 514.0], [46.0, 948.0], [49.0, 463.5], [48.0, 523.0], [3.0, 2580.0], [50.0, 1407.4226262626244], [4.0, 2325.0], [5.0, 1695.0], [6.0, 1788.0], [7.0, 2051.0], [8.0, 2216.0], [9.0, 2111.0], [10.0, 2277.0], [11.0, 1682.0], [12.0, 2576.0], [13.0, 2208.0], [14.0, 1763.0], [15.0, 2362.0], [16.0, 2062.0], [1.0, 95.0], [17.0, 2799.0], [18.0, 2058.0], [19.0, 1969.0], [20.0, 2107.0], [21.0, 2004.0], [23.0, 1651.5], [24.0, 1987.0], [25.0, 1440.0], [26.0, 1164.0], [27.0, 1566.0], [28.0, 1160.0], [29.0, 1709.0], [30.0, 1712.0], [31.0, 837.0]], "isOverall": false, "label": "事务控制器", "isController": true}, {"data": [[49.7552, 1408.8369999999977]], "isOverall": false, "label": "事务控制器-Aggregated", "isController": true}, {"data": [[33.0, 459.0], [32.0, 472.0], [2.0, 47.0], [35.0, 441.0], [37.0, 309.0], [36.0, 328.0], [39.0, 227.0], [38.0, 241.0], [41.0, 197.0], [40.0, 207.0], [43.0, 174.0], [42.0, 192.0], [45.0, 164.0], [44.0, 168.0], [47.0, 132.0], [46.0, 159.0], [49.0, 109.0], [48.0, 112.0], [3.0, 1106.0], [50.0, 851.7111111111132], [4.0, 1069.0], [5.0, 1059.0], [6.0, 1055.0], [7.0, 1045.0], [8.0, 1029.0], [9.0, 1015.0], [10.0, 1009.0], [11.0, 1010.0], [12.0, 856.0], [13.0, 835.0], [14.0, 837.0], [15.0, 820.0], [16.0, 820.0], [1.0, 52.0], [17.0, 812.0], [18.0, 808.0], [19.0, 801.0], [20.0, 784.0], [21.0, 776.0], [23.0, 772.0], [24.0, 515.0], [25.0, 507.0], [26.0, 498.0], [27.0, 493.0], [28.0, 491.0], [29.0, 486.0], [30.0, 479.0], [31.0, 483.0]], "isOverall": false, "label": "02查看商品详情", "isController": false}, {"data": [[49.7552, 848.750400000002]], "isOverall": false, "label": "02查看商品详情-Aggregated", "isController": false}, {"data": [[2.0, 43.0], [50.0, 560.1898379675949]], "isOverall": false, "label": "01.进入首页", "isController": false}, {"data": [[49.9904, 560.0864000000014]], "isOverall": false, "label": "01.进入首页-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1861.95, "minX": 1.56699414E12, "maxY": 1248302.7, "series": [{"data": [[1.56699444E12, 959718.3333333334], [1.56699414E12, 511286.7], [1.56699426E12, 1233049.1166666667], [1.5669942E12, 1229199.8666666667], [1.56699438E12, 1158172.9166666667], [1.56699432E12, 1248302.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.56699444E12, 3493.883333333333], [1.56699414E12, 1861.95], [1.56699426E12, 4487.783333333334], [1.5669942E12, 4477.533333333334], [1.56699438E12, 4215.833333333333], [1.56699432E12, 4546.35]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56699444E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 500.1491935483866, "minX": 1.56699414E12, "maxY": 1471.103343465045, "series": [{"data": [[1.56699444E12, 1440.3013513513538], [1.56699414E12, 1356.4168674698803], [1.56699426E12, 1404.0810810810833], [1.5669942E12, 1368.8568527918774], [1.56699438E12, 1387.9473106476382], [1.56699432E12, 1471.103343465045]], "isOverall": false, "label": "事务控制器", "isController": true}, {"data": [[1.56699444E12, 860.7677165354335], [1.56699414E12, 773.9125000000004], [1.56699426E12, 745.7558022199788], [1.5669942E12, 875.7884210526315], [1.56699438E12, 851.2118918918916], [1.56699432E12, 946.3662551440331]], "isOverall": false, "label": "02查看商品详情", "isController": false}, {"data": [[1.56699444E12, 569.6045272969367], [1.56699414E12, 606.5552825552824], [1.56699426E12, 655.9589905362784], [1.5669942E12, 500.1491935483866], [1.56699438E12, 540.4677777777785], [1.56699432E12, 519.9249249249258]], "isOverall": false, "label": "01.进入首页", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56699444E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 188.90221774193515, "minX": 1.56699414E12, "maxY": 775.0965971459933, "series": [{"data": [[1.56699444E12, 724.1540540540533], [1.56699414E12, 658.7975903614456], [1.56699426E12, 706.719334719335], [1.5669942E12, 652.4923857868017], [1.56699438E12, 775.0965971459933], [1.56699432E12, 748.6028368794317]], "isOverall": false, "label": "事务控制器", "isController": true}, {"data": [[1.56699444E12, 459.34645669291325], [1.56699414E12, 389.2849999999998], [1.56699426E12, 368.67911200807333], [1.5669942E12, 470.2736842105263], [1.56699438E12, 493.8702702702694], [1.56699432E12, 512.3384773662539]], "isOverall": false, "label": "02查看商品详情", "isController": false}, {"data": [[1.56699444E12, 263.1451398135817], [1.56699414E12, 281.87714987714986], [1.56699426E12, 332.4069400630912], [1.5669942E12, 188.90221774193515], [1.56699438E12, 279.97999999999985], [1.56699432E12, 236.5465465465467]], "isOverall": false, "label": "01.进入首页", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56699444E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.4516460905349793, "minX": 1.56699414E12, "maxY": 68.85510428100997, "series": [{"data": [[1.56699444E12, 40.458108108108156], [1.56699414E12, 37.55903614457836], [1.56699426E12, 42.6632016632017], [1.5669942E12, 40.05482233502534], [1.56699438E12, 68.85510428100997], [1.56699432E12, 34.42958459979731]], "isOverall": false, "label": "事务控制器", "isController": true}, {"data": [[1.56699444E12, 9.108923884514429], [1.56699414E12, 9.839999999999993], [1.56699426E12, 18.199798183652888], [1.5669942E12, 1.6010526315789455], [1.56699438E12, 44.352432432432416], [1.56699432E12, 0.4516460905349793]], "isOverall": false, "label": "02查看商品详情", "isController": false}, {"data": [[1.56699444E12, 31.5472703062583], [1.56699414E12, 27.75429975429976], [1.56699426E12, 28.955835962145134], [1.5669942E12, 33.76108870967746], [1.56699438E12, 23.254444444444463], [1.56699432E12, 33.92092092092087]], "isOverall": false, "label": "01.进入首页", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56699444E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.56699414E12, "maxY": 8095.0, "series": [{"data": [[1.56699444E12, 2329.0], [1.56699414E12, 2295.0], [1.56699426E12, 3055.0], [1.5669942E12, 2318.0], [1.56699438E12, 8095.0], [1.56699432E12, 3590.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.56699444E12, 31.0], [1.56699414E12, 30.0], [1.56699426E12, 34.0], [1.5669942E12, 42.0], [1.56699438E12, 37.0], [1.56699432E12, 52.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.56699444E12, 1280.0], [1.56699414E12, 1251.2], [1.56699426E12, 1253.8000000000002], [1.5669942E12, 1264.0], [1.56699438E12, 1279.1999999999998], [1.56699432E12, 1269.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.56699444E12, 2008.9799999999996], [1.56699414E12, 1997.6799999999998], [1.56699426E12, 2033.3199999999997], [1.5669942E12, 2053.5], [1.56699438E12, 2007.2400000000016], [1.56699432E12, 2013.7399999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.56699444E12, 1810.949999999999], [1.56699414E12, 1766.9999999999973], [1.56699426E12, 1670.199999999997], [1.5669942E12, 1751.0], [1.56699438E12, 1816.5999999999995], [1.56699432E12, 1815.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56699444E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 585.0, "minX": 13.0, "maxY": 642.0, "series": [{"data": [[32.0, 627.0], [25.0, 642.0], [13.0, 585.0], [30.0, 603.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 32.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 168.0, "minX": 13.0, "maxY": 183.0, "series": [{"data": [[32.0, 169.0], [25.0, 183.0], [13.0, 169.0], [30.0, 168.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 32.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 14.166666666666666, "minX": 1.56699414E12, "maxY": 33.31666666666667, "series": [{"data": [[1.56699444E12, 25.05], [1.56699414E12, 14.166666666666666], [1.56699426E12, 32.5], [1.5669942E12, 31.666666666666668], [1.56699438E12, 29.966666666666665], [1.56699432E12, 33.31666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56699444E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 13.45, "minX": 1.56699414E12, "maxY": 32.85, "series": [{"data": [[1.56699444E12, 25.216666666666665], [1.56699414E12, 13.45], [1.56699426E12, 32.36666666666667], [1.5669942E12, 32.36666666666667], [1.56699438E12, 30.416666666666668], [1.56699432E12, 32.85]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56699444E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 6.666666666666667, "minX": 1.56699414E12, "maxY": 16.65, "series": [{"data": [[1.56699444E12, 12.7], [1.56699414E12, 6.666666666666667], [1.56699426E12, 16.516666666666666], [1.5669942E12, 15.833333333333334], [1.56699438E12, 15.416666666666666], [1.56699432E12, 16.2]], "isOverall": false, "label": "02查看商品详情-success", "isController": false}, {"data": [[1.56699444E12, 12.333333333333334], [1.56699414E12, 6.916666666666667], [1.56699426E12, 16.033333333333335], [1.5669942E12, 16.416666666666668], [1.56699438E12, 15.183333333333334], [1.56699432E12, 16.45]], "isOverall": false, "label": "事务控制器-success", "isController": true}, {"data": [[1.56699444E12, 12.516666666666667], [1.56699414E12, 6.783333333333333], [1.56699426E12, 15.85], [1.5669942E12, 16.533333333333335], [1.56699438E12, 15.0], [1.56699432E12, 16.65]], "isOverall": false, "label": "01.进入首页-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56699444E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

// Collapse
$(function() {
        $('.collapse').on('shown.bs.collapse', function(){
            collapse(this, false);
        }).on('hidden.bs.collapse', function(){
            collapse(this, true);
        });
});

$(function() {
    $(".glyphicon").mousedown( function(event){
        var tmp = $('.in:not(ul)');
        tmp.parent().parent().parent().find(".fa-chevron-up").removeClass("fa-chevron-down").addClass("fa-chevron-down");
        tmp.removeClass("in");
        tmp.addClass("out");
    });
});

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

// Unchecks all boxes for "Hide all samples" functionality
function uncheckAll(id){
    toggleAll(id, false);
}

// Checks all boxes for "Show all samples" functionality
function checkAll(id){
    toggleAll(id, true);
}

// Prepares data to be consumed by plot plugins
function prepareData(series, choiceContainer, customizeSeries){
    var datasets = [];

    // Add only selected series to the data set
    choiceContainer.find("input:checked").each(function (index, item) {
        var key = $(item).attr("name");
        var i = 0;
        var size = series.length;
        while(i < size && series[i].label != key)
            i++;
        if(i < size){
            var currentSeries = series[i];
            datasets.push(currentSeries);
            if(customizeSeries)
                customizeSeries(currentSeries);
        }
    });
    return datasets;
}

/*
 * Ignore case comparator
 */
function sortAlphaCaseless(a,b){
    return a.toLowerCase() > b.toLowerCase() ? 1 : -1;
};

/*
 * Creates a legend in the specified element with graph information
 */
function createLegend(choiceContainer, infos) {
    // Sort series by name
    var keys = [];
    $.each(infos.data.result.series, function(index, series){
        keys.push(series.label);
    });
    keys.sort(sortAlphaCaseless);

    // Create list of series with support of activation/deactivation
    $.each(keys, function(index, key) {
        var id = choiceContainer.attr('id') + index;
        $('<li />')
            .append($('<input id="' + id + '" name="' + key + '" type="checkbox" checked="checked" hidden />'))
            .append($('<label />', { 'text': key , 'for': id }))
            .appendTo(choiceContainer);
    });
    choiceContainer.find("label").click( function(){
        if (this.style.color !== "rgb(129, 129, 129)" ){
            this.style.color="#818181";
        }else {
            this.style.color="black";
        }
        $(this).parent().children().children().toggleClass("legend-disabled");
    });
    choiceContainer.find("label").mousedown( function(event){
        event.preventDefault();
    });
    choiceContainer.find("label").mouseenter(function(){
        this.style.cursor="pointer";
    });

    // Recreate graphe on series activation toggle
    choiceContainer.find("input").click(function(){
        infos.createGraph();
    });
}
